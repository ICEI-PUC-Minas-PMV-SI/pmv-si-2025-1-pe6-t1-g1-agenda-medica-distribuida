// Teste de cen√°rios extremos que podem estar causando o erro
console.log('üîç Teste de Cen√°rios Extremos - Identificando o Problema Real\n');

const UPLOAD_CONFIG = {
  maxFileSize: 5 * 1024 * 1024, // 5MB
  allowedTypes: ['image/jpeg', 'image/png', 'image/webp'],
  imageQuality: 0.8,
  maxDimensions: {
    width: 800,
    height: 800,
  },
};

// Cen√°rios EXTREMOS que podem estar causando o problema
const extremeScenarios = [
  // Cen√°rio 1: Asset com propriedades vazias/undefined
  {
    uri: '',
    type: undefined,
    fileSize: undefined,
    width: undefined,
    height: undefined,
    scenario: 'Asset vazio/corrompido'
  },
  
  // Cen√°rio 2: URI com caracteres especiais
  {
    uri: 'content://com.android.providers.media.documents/document/image%3A12345%2Ftest%20image.jpg',
    type: undefined,
    fileSize: 2048000,
    width: 1920,
    height: 1080,
    scenario: 'URI com caracteres especiais'
  },
  
  // Cen√°rio 3: Asset com type que n√£o √© string
  {
    uri: 'file:///storage/emulated/0/DCIM/Camera/IMG_20241205_143022.jpg',
    type: null,
    fileSize: 2048000,
    width: 1920,
    height: 1080,
    scenario: 'Type null (n√£o undefined)'
  },
  
  // Cen√°rio 4: URI muito longa sem extens√£o
  {
    uri: 'content://com.google.android.apps.photos.contentprovider/0/1/content%3A//media/external/images/media/12345/ORIGINAL/NONE/image_picker_1234567890',
    type: undefined,
    fileSize: 2048000,
    width: 1920,
    height: 1080,
    scenario: 'URI muito longa sem extens√£o'
  },
  
  // Cen√°rio 5: Type com valor inesperado
  {
    uri: 'file:///storage/emulated/0/DCIM/Camera/IMG_20241205_143022.jpg',
    type: '',
    fileSize: 2048000,
    width: 1920,
    height: 1080,
    scenario: 'Type string vazia'
  },
  
  // Cen√°rio 6: URI com m√∫ltiplos pontos
  {
    uri: 'file:///storage/emulated/0/DCIM/Camera/IMG.20241205.143022.backup.jpg',
    type: undefined,
    fileSize: 2048000,
    width: 1920,
    height: 1080,
    scenario: 'URI com m√∫ltiplos pontos'
  },
  
  // Cen√°rio 7: Type com valor inv√°lido mas que come√ßa com 'image/'
  {
    uri: 'content://media/external/images/media/12345',
    type: 'image/',
    fileSize: 2048000,
    width: 1920,
    height: 1080,
    scenario: 'Type "image/" incompleto'
  },
  
  // Cen√°rio 8: URI que pode confundir a detec√ß√£o
  {
    uri: 'content://com.android.providers.media.documents/document/image%3A12345.png.jpg',
    type: undefined,
    fileSize: 2048000,
    width: 1920,
    height: 1080,
    scenario: 'URI com m√∫ltiplas extens√µes'
  }
];

// Fun√ß√£o que simula exatamente o c√≥digo atual do hook
function validateImageExact(imageAsset) {
  console.log('üîç [EXATO] Validando:', {
    uri: imageAsset.uri,
    type: imageAsset.type,
    scenario: imageAsset.scenario
  });

  try {
    // Verificar tamanho do arquivo
    if (imageAsset.fileSize && imageAsset.fileSize > UPLOAD_CONFIG.maxFileSize) {
      const maxSizeMB = Math.round(UPLOAD_CONFIG.maxFileSize / (1024 * 1024));
      const fileSizeMB = Math.round(imageAsset.fileSize / (1024 * 1024));
      const error = `Arquivo muito grande (${fileSizeMB}MB). Tamanho m√°ximo: ${maxSizeMB}MB`;
      console.log('‚ùå [EXATO] Erro de tamanho:', error);
      return { valid: false, error };
    }

    // NOVA L√ìGICA: Priorizar asset.type quando dispon√≠vel e v√°lido
    let detectedMimeType;
    let validationSource;

    if (imageAsset.type && imageAsset.type.startsWith('image/')) {
      // Usar asset.type se dispon√≠vel e v√°lido
      detectedMimeType = imageAsset.type;
      validationSource = 'asset.type';
      console.log('üéØ [EXATO] Usando asset.type:', detectedMimeType);
    } else {
      // Fallback para detec√ß√£o por URI
      console.log('üîç [EXATO] Analisando URI:', imageAsset.uri);
      
      const extension = imageAsset.uri.split('.').pop()?.toLowerCase();
      console.log('üìÑ [EXATO] Extens√£o detectada:', extension);
      
      const cleanExtension = extension?.split('?')[0]?.split('#')[0];
      console.log('üßπ [EXATO] Extens√£o limpa:', cleanExtension);
      
      switch (cleanExtension) {
        case 'jpg':
        case 'jpeg':
          console.log('‚úÖ [EXATO] Tipo detectado: JPEG');
          detectedMimeType = 'image/jpeg';
          break;
        case 'png':
          console.log('‚úÖ [EXATO] Tipo detectado: PNG');
          detectedMimeType = 'image/png';
          break;
        case 'webp':
          console.log('‚úÖ [EXATO] Tipo detectado: WebP');
          detectedMimeType = 'image/webp';
          break;
        default:
          console.log('‚ö†Ô∏è [EXATO] Extens√£o n√£o reconhecida, usando JPEG como fallback');
          detectedMimeType = 'image/jpeg';
      }
      validationSource = 'URI extension';
      console.log('üéØ [EXATO] Usando detec√ß√£o por URI:', detectedMimeType);
    }

    console.log('üìã [EXATO] Tipos permitidos:', UPLOAD_CONFIG.allowedTypes);
    console.log('üîç [EXATO] Fonte da valida√ß√£o:', validationSource);
    
    // Verificar se o tipo detectado √© permitido
    let isValidType = UPLOAD_CONFIG.allowedTypes.includes(detectedMimeType);
    console.log('üìä [EXATO] Valida√ß√£o inicial:', isValidType);
    
    // Se n√£o passou na valida√ß√£o inicial, tentar estrat√©gias alternativas
    if (!isValidType) {
      console.log('üîÑ [EXATO] Tentando estrat√©gias alternativas...');
      
      // Estrat√©gia 1: URIs especiais sempre aceitas
      const specialUriPatterns = [
        'ImagePicker',
        'expo',
        'content://',
        'ph://',
        '/DCIM/',
        '/Camera/',
        'media/external'
      ];
      
      const isSpecialUri = specialUriPatterns.some(pattern => 
        imageAsset.uri.includes(pattern)
      );
      
      if (isSpecialUri) {
        console.log('‚úÖ [EXATO] URI especial detectada, assumindo tipo v√°lido');
        isValidType = true;
      }
      
      // Estrat√©gia 2: Se asset.type n√£o foi usado, tentar us√°-lo agora
      if (!isValidType && imageAsset.type && validationSource !== 'asset.type') {
        console.log('üîÑ [EXATO] Tentando com asset.type como fallback:', imageAsset.type);
        isValidType = UPLOAD_CONFIG.allowedTypes.includes(imageAsset.type);
        if (isValidType) {
          detectedMimeType = imageAsset.type;
          console.log('‚úÖ [EXATO] Valida√ß√£o bem-sucedida com asset.type');
        }
      }
      
      // Estrat√©gia 3: Para URIs sem extens√£o clara, assumir JPEG se vier de fonte confi√°vel
      if (!isValidType && !imageAsset.uri.includes('.')) {
        console.log('üîÑ [EXATO] URI sem extens√£o detectada, assumindo JPEG');
        detectedMimeType = 'image/jpeg';
        isValidType = true;
      }
    }
    
    if (!isValidType) {
      const error = 'Tipo de arquivo n√£o suportado. Use JPEG, PNG ou WebP.';
      console.log('‚ùå [EXATO] Tipo n√£o permitido ap√≥s todas as tentativas:', { 
        detectedMimeType, 
        assetType: imageAsset.type,
        uri: imageAsset.uri 
      });
      return { valid: false, error };
    }

    console.log('‚úÖ [EXATO] Imagem validada com sucesso');
    console.log('üìä [EXATO] Tipo final aceito:', detectedMimeType);
    return { valid: true, error: null };
  } catch (error) {
    console.log('‚ùå [EXATO] Erro na valida√ß√£o da imagem:', error);
    return { valid: false, error: 'Erro ao validar a imagem selecionada.' };
  }
}

// Executar testes com cen√°rios extremos
console.log('üß™ Testando cen√°rios extremos...\n');

let problemsFound = 0;

extremeScenarios.forEach((scenario, index) => {
  console.log(`\n--- TESTE ${index + 1}: ${scenario.scenario} ---`);
  
  const result = validateImageExact(scenario);
  console.log(`Resultado: ${result.valid ? '‚úÖ PASSOU' : '‚ùå FALHOU'}`);
  
  if (!result.valid) {
    console.log(`‚ùå ERRO: ${result.error}`);
    console.log('üéØ PROBLEMA IDENTIFICADO NESTE CEN√ÅRIO!');
    problemsFound++;
  }
  
  console.log('---');
});

console.log(`\nüìä RESUMO DOS TESTES:`);
console.log(`Total de cen√°rios testados: ${extremeScenarios.length}`);
console.log(`Problemas encontrados: ${problemsFound}`);

if (problemsFound > 0) {
  console.log('\nüéØ PROBLEMAS IDENTIFICADOS!');
  console.log('Os cen√°rios que falharam s√£o provavelmente a causa do erro no app.');
  console.log('Verifique os logs acima para ver exatamente onde a valida√ß√£o est√° falhando.');
} else {
  console.log('\n‚úÖ TODOS OS CEN√ÅRIOS PASSARAM');
  console.log('O problema pode estar em outro lugar:');
  console.log('1. Erro na chamada da fun√ß√£o de valida√ß√£o');
  console.log('2. Problema no upload para o Cloudinary');
  console.log('3. Erro de rede ou configura√ß√£o');
  console.log('4. Problema espec√≠fico do dispositivo/plataforma');
}

console.log('\nüîç PR√ìXIMOS PASSOS:');
console.log('1. Se problemas foram encontrados: Corrigir a valida√ß√£o para esses cen√°rios');
console.log('2. Se nenhum problema: Adicionar logs mais detalhados no app real');
console.log('3. Verificar se o erro est√° acontecendo na valida√ß√£o ou no upload');
console.log('4. Testar com uma imagem real no dispositivo'); 