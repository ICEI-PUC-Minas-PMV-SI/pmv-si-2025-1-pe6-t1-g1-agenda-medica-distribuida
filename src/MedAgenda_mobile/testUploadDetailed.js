// Teste detalhado para identificar o problema espec√≠fico do upload
console.log('üîç Teste Detalhado do Erro de Upload\n');

// Simular a configura√ß√£o atual
const UPLOAD_CONFIG = {
  maxFileSize: 5 * 1024 * 1024, // 5MB
  allowedTypes: ['image/jpeg', 'image/png', 'image/webp'],
  imageQuality: 0.8,
  maxDimensions: {
    width: 800,
    height: 800,
  },
};

console.log('üìã Configura√ß√£o atual:', UPLOAD_CONFIG);

// Simular diferentes cen√°rios de ImagePicker.ImagePickerAsset
const testAssets = [
  // Cen√°rio 1: Asset t√≠pico do Android
  {
    uri: 'content://media/external/images/media/12345',
    type: 'image/jpeg',
    fileSize: 2048000, // 2MB
    width: 1920,
    height: 1080,
    scenario: 'Android Gallery'
  },
  
  // Cen√°rio 2: Asset t√≠pico do iOS
  {
    uri: 'ph://CC95F08C-88C3-4012-9D6D-64CFE5B90D11/L0/001',
    type: 'image/jpeg',
    fileSize: 1536000, // 1.5MB
    width: 1024,
    height: 768,
    scenario: 'iOS Photos'
  },
  
  // Cen√°rio 3: Asset do Expo ImagePicker
  {
    uri: 'file:///var/mobile/Containers/Data/Application/ImagePicker/image.jpg',
    type: 'image/jpeg',
    fileSize: 3072000, // 3MB
    width: 800,
    height: 600,
    scenario: 'Expo ImagePicker'
  },
  
  // Cen√°rio 4: Asset sem extens√£o clara
  {
    uri: 'content://com.android.providers.media.documents/document/image%3A12345',
    type: 'image/png',
    fileSize: 1024000, // 1MB
    width: 640,
    height: 480,
    scenario: 'Android Document Provider'
  },
  
  // Cen√°rio 5: Asset com tipo undefined (problema comum)
  {
    uri: 'file:///storage/emulated/0/DCIM/Camera/IMG_20241204_123456.jpg',
    type: undefined,
    fileSize: 4096000, // 4MB
    width: 1920,
    height: 1080,
    scenario: 'Android Camera (tipo undefined)'
  }
];

// Fun√ß√£o de detec√ß√£o de tipo MIME (igual √† implementada)
function getImageTypeFromUri(uri) {
  console.log('  üîç Analisando URI:', uri);
  
  const extension = uri.split('.').pop()?.toLowerCase();
  console.log('  üìÑ Extens√£o detectada:', extension);
  
  const cleanExtension = extension?.split('?')[0]?.split('#')[0];
  console.log('  üßπ Extens√£o limpa:', cleanExtension);
  
  switch (cleanExtension) {
    case 'jpg':
    case 'jpeg':
      console.log('  ‚úÖ Tipo detectado: JPEG');
      return 'image/jpeg';
    case 'png':
      console.log('  ‚úÖ Tipo detectado: PNG');
      return 'image/png';
    case 'webp':
      console.log('  ‚úÖ Tipo detectado: WebP');
      return 'image/webp';
    default:
      console.log('  ‚ö†Ô∏è Extens√£o n√£o reconhecida, usando JPEG como fallback');
      return 'image/jpeg';
  }
}

// Fun√ß√£o de valida√ß√£o (igual √† implementada)
function validateImage(imageAsset) {
  console.log('  üîç Validando imagem:', {
    uri: imageAsset.uri,
    fileSize: imageAsset.fileSize,
    width: imageAsset.width,
    height: imageAsset.height,
    type: imageAsset.type
  });

  try {
    // Verificar tamanho do arquivo
    if (imageAsset.fileSize && imageAsset.fileSize > UPLOAD_CONFIG.maxFileSize) {
      const maxSizeMB = Math.round(UPLOAD_CONFIG.maxFileSize / (1024 * 1024));
      const fileSizeMB = Math.round(imageAsset.fileSize / (1024 * 1024));
      const error = `Arquivo muito grande (${fileSizeMB}MB). Tamanho m√°ximo: ${maxSizeMB}MB`;
      console.log('  ‚ùå Erro de tamanho:', error);
      return { valid: false, error };
    }

    // Verificar tipo de arquivo pela extens√£o da URI
    const mimeType = getImageTypeFromUri(imageAsset.uri);
    console.log('  üéØ Tipo MIME detectado:', mimeType);
    console.log('  üìã Tipos permitidos:', UPLOAD_CONFIG.allowedTypes);
    
    // Valida√ß√£o prim√°ria por extens√£o
    let isValidType = UPLOAD_CONFIG.allowedTypes.includes(mimeType);
    console.log('  üìä Valida√ß√£o por extens√£o:', isValidType);
    
    // Valida√ß√£o alternativa se o tipo do asset estiver dispon√≠vel
    if (!isValidType && imageAsset.type) {
      console.log('  üîÑ Tentando valida√ß√£o alternativa com asset.type:', imageAsset.type);
      isValidType = UPLOAD_CONFIG.allowedTypes.includes(imageAsset.type);
      console.log('  üìä Valida√ß√£o por asset.type:', isValidType);
    }
    
    // Valida√ß√£o mais permissiva para URIs do expo/react-native
    if (!isValidType && (imageAsset.uri.includes('ImagePicker') || imageAsset.uri.includes('expo') || imageAsset.uri.includes('content://') || imageAsset.uri.includes('ph://'))) {
      console.log('  üîÑ URI especial detectada, assumindo tipo v√°lido');
      isValidType = true;
    }
    
    if (!isValidType) {
      const error = 'Tipo de arquivo n√£o suportado. Use JPEG, PNG ou WebP.';
      console.log('  ‚ùå Tipo n√£o permitido:', { mimeType, assetType: imageAsset.type });
      return { valid: false, error };
    }

    // Verificar se o tipo do asset tamb√©m √© v√°lido (se dispon√≠vel)
    if (imageAsset.type && !imageAsset.type.startsWith('image/') && !imageAsset.uri.includes('ImagePicker')) {
      const error = 'Arquivo selecionado n√£o √© uma imagem v√°lida.';
      console.log('  ‚ùå Asset type inv√°lido:', imageAsset.type);
      return { valid: false, error };
    }

    console.log('  ‚úÖ Imagem validada com sucesso');
    return { valid: true, error: null };
  } catch (error) {
    console.log('  ‚ùå Erro na valida√ß√£o da imagem:', error);
    return { valid: false, error: 'Erro ao validar a imagem selecionada.' };
  }
}

// Testar todos os cen√°rios
console.log('\nüß™ Testando diferentes cen√°rios de assets:\n');

testAssets.forEach((asset, index) => {
  console.log(`\n--- Teste ${index + 1}: ${asset.scenario} ---`);
  const result = validateImage(asset);
  console.log(`  Resultado: ${result.valid ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO'}`);
  if (!result.valid) {
    console.log(`  Erro: ${result.error}`);
  }
  console.log('---');
});

console.log('\nüîç An√°lise dos Resultados:');
console.log('Se algum teste falhou, isso indica onde est√° o problema.');
console.log('Verifique especialmente:');
console.log('1. Assets sem extens√£o clara na URI');
console.log('2. Assets com type undefined');
console.log('3. URIs especiais do Android/iOS');

console.log('\nüí° Poss√≠veis solu√ß√µes:');
console.log('1. Melhorar detec√ß√£o de tipo para URIs sem extens√£o');
console.log('2. Usar asset.type como fonte prim√°ria quando dispon√≠vel');
console.log('3. Implementar fallback mais robusto');

console.log('\nüì± Para debug no app real:');
console.log('1. Adicione console.log no hook useImageUpload');
console.log('2. Verifique exatamente qual asset est√° sendo passado');
console.log('3. Compare com os cen√°rios testados aqui'); 