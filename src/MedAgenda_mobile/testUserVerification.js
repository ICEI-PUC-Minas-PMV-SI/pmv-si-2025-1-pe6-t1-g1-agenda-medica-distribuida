// Teste para verificar e resolver problema de verifica√ß√£o do usu√°rio
const axios = require('axios');

async function testUserVerification() {
  console.log('üîç TESTE DE VERIFICA√á√ÉO DO USU√ÅRIO\n');
  
  const api = axios.create({
    baseURL: 'https://med-agenda-backend.vercel.app/api',
    timeout: 15000,
    headers: {
      'Content-Type': 'application/json',
      'client': 'not-browser',
    }
  });

  let authToken = null;

  // 1. Fazer login
  console.log('üîê Fazendo login...');
  try {
    const loginResponse = await api.post('/auth/signin', {
      email: 'jj@gmail.com',
      password: 'Abc12345'
    });
    
    authToken = loginResponse.data.token;
    console.log('‚úÖ Login realizado com sucesso!');
    
  } catch (error) {
    console.log('‚ùå Erro no login:', error.response?.data || error.message);
    return;
  }

  // 2. Tentar enviar c√≥digo de verifica√ß√£o
  console.log('\nüìß Enviando c√≥digo de verifica√ß√£o...');
  try {
    const verificationResponse = await api.patch('/auth/send-verification-code', {
      email: 'jj@gmail.com'
    }, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    console.log('‚úÖ C√≥digo enviado:', verificationResponse.data);
    
    // Simular c√≥digo de verifica√ß√£o (geralmente seria enviado por email)
    console.log('\nüî¢ Tentando verificar com c√≥digo padr√£o...');
    
    // Tentar alguns c√≥digos comuns de teste
    const testCodes = ['123456', '000000', '111111', '999999'];
    
    for (const code of testCodes) {
      try {
        const verifyResponse = await api.patch('/auth/verify-verification-code', {
          email: 'jj@gmail.com',
          providedCode: code
        }, {
          headers: {
            'Authorization': `Bearer ${authToken}`
          }
        });
        
        console.log(`‚úÖ Verifica√ß√£o bem-sucedida com c√≥digo ${code}:`, verifyResponse.data);
        break;
        
      } catch (verifyError) {
        console.log(`‚ùå C√≥digo ${code} inv√°lido:`, verifyError.response?.data?.message);
      }
    }
    
  } catch (error) {
    console.log('‚ùå Erro ao enviar c√≥digo:', error.response?.data || error.message);
  }

  // 3. Testar agendamentos ap√≥s verifica√ß√£o
  console.log('\nüìÖ Testando agendamentos ap√≥s tentativa de verifica√ß√£o...');
  try {
    const appointmentsResponse = await api.get('/appointment', {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    console.log('‚úÖ Agendamentos carregados:', appointmentsResponse.data);
    
  } catch (error) {
    console.log('‚ùå Ainda com erro nos agendamentos:', error.response?.data || error.message);
  }

  // 4. Testar mudan√ßa de senha (que tamb√©m falhou antes)
  console.log('\nüîë Testando mudan√ßa de senha...');
  try {
    const passwordResponse = await api.patch('/auth/change-password', {
      oldPassword: 'Abc12345',
      newPassword: 'Abc12345' // Mesma senha
    }, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    console.log('‚úÖ Mudan√ßa de senha funcionou:', passwordResponse.data);
    
  } catch (error) {
    console.log('‚ùå Erro na mudan√ßa de senha:', error.response?.data || error.message);
  }

  console.log('\nüéØ CONCLUS√ÉO:');
  console.log('Se o usu√°rio n√£o est√° verificado, voc√™ precisa:');
  console.log('1. Verificar se h√° um c√≥digo de verifica√ß√£o no email');
  console.log('2. Usar o endpoint /auth/verify-verification-code');
  console.log('3. Ou verificar se o backend permite usu√°rios n√£o verificados');
}

testUserVerification(); 