// Teste ultra rigoroso para verificar se o bot√£o admin foi COMPLETAMENTE removido
console.log('üî¨ TESTE ULTRA RIGOROSO: Verifica√ß√£o de Remo√ß√£o do Bot√£o Admin');
console.log('==============================================================\n');

function testUltraRigorousAdminRemoval(user) {
  console.log(`üß™ Testando usu√°rio: ${user.name} (${user.email})`);
  console.log('üìã Dados:', user);
  
  // NOVA L√ìGICA ULTRA RIGOROSA (copiada do _layout.tsx)
  const nonAdminEmails = [
    'filo@gmail.com',
    'user@test.com',
    'teste@gmail.com',
    'normal@user.com',
    'test@test.com',
    'usuario@teste.com'
  ];

  const userEmail = user?.email?.toLowerCase()?.trim() || '';
  const isBlacklistedUser = nonAdminEmails.includes(userEmail);
  const hasValidAdminFlag = user && user.isAdmin === true && typeof user.isAdmin === 'boolean';
  
  // REGRA ABSOLUTA: NUNCA mostrar admin para usu√°rios blacklistados
  const finalAdminCheck = hasValidAdminFlag && !isBlacklistedUser;
  
  // VERIFICA√á√ÉO DE EMERG√äNCIA: Se for filo@gmail.com, FOR√áAR bloqueio
  const isFiloEmergency = userEmail === 'filo@gmail.com';
  const emergencyBlock = isFiloEmergency;
  
  // DECIS√ÉO FINAL: Admin tab s√≥ aparece se passar em TODAS as verifica√ß√µes E n√£o for emerg√™ncia
  const showAdminTab = finalAdminCheck && !emergencyBlock;
  
  console.log('üîí VERIFICA√á√ÉO ULTRA RIGOROSA:', {
    userEmail: userEmail,
    isBlacklistedUser: isBlacklistedUser,
    hasValidAdminFlag: hasValidAdminFlag,
    isFiloEmergency: isFiloEmergency,
    emergencyBlock: emergencyBlock,
    finalCheck: finalAdminCheck,
    showAdminTab: showAdminTab
  });
  
  // Simular cria√ß√£o das tabs
  const baseScreens = ['index', 'appointments', 'doctors', 'new-appointment'];
  
  if (showAdminTab) {
    baseScreens.push('admin-doctors');
    console.log('‚úÖ Admin tab ADICIONADA');
  } else {
    console.log('‚ùå Admin tab N√ÉO ADICIONADA');
  }
  
  baseScreens.push('profile');
  
  // FILTRO DE EMERG√äNCIA: Remover qualquer tab admin que possa ter passado
  const finalScreens = baseScreens.filter(tab => {
    if (tab === 'admin-doctors' && (isBlacklistedUser || isFiloEmergency)) {
      console.log('üö® FILTRO DE EMERG√äNCIA: Removendo admin tab que passou incorretamente');
      return false;
    }
    return true;
  });
  
  console.log('üõ°Ô∏è TABS AP√ìS FILTRO DE EMERG√äNCIA:', finalScreens);
  console.log('üõ°Ô∏è Total final:', finalScreens.length);
  
  const hasAdminInFinal = finalScreens.includes('admin-doctors');
  console.log('üîç VERIFICA√á√ÉO FINAL: Cont√©m admin-doctors?', hasAdminInFinal ? 'SIM ‚ùå' : 'N√ÉO ‚úÖ');
  
  return {
    showAdminTab: showAdminTab,
    finalTabs: finalScreens,
    hasAdminTab: hasAdminInFinal,
    isBlocked: isBlacklistedUser || isFiloEmergency
  };
}

// Casos de teste extremos
const extremeTestCases = [
  {
    name: 'filo@gmail.com com isAdmin: false (caso normal)',
    user: { id: '1', name: 'Filo User', email: 'filo@gmail.com', isAdmin: false }
  },
  {
    name: 'filo@gmail.com com isAdmin: true (deve ser bloqueado)',
    user: { id: '2', name: 'Filo User', email: 'filo@gmail.com', isAdmin: true }
  },
  {
    name: 'FILO@GMAIL.COM mai√∫sculo (deve ser bloqueado)',
    user: { id: '3', name: 'Filo User', email: 'FILO@GMAIL.COM', isAdmin: true }
  },
  {
    name: 'filo@gmail.com com espa√ßos (deve ser bloqueado)',
    user: { id: '4', name: 'Filo User', email: ' filo@gmail.com ', isAdmin: true }
  },
  {
    name: 'filo@gmail.com sem isAdmin definido',
    user: { id: '5', name: 'Filo User', email: 'filo@gmail.com' }
  },
  {
    name: 'admin@test.com leg√≠timo',
    user: { id: '6', name: 'Real Admin', email: 'admin@test.com', isAdmin: true }
  }
];

console.log('üöÄ Executando testes extremos...\n');

let allTestsPassed = true;

extremeTestCases.forEach((testCase, index) => {
  console.log(`\n${'='.repeat(70)}`);
  console.log(`TESTE ${index + 1}: ${testCase.name}`);
  console.log(`${'='.repeat(70)}`);
  
  const result = testUltraRigorousAdminRemoval(testCase.user);
  
  // Verificar se o resultado est√° correto
  const isFiloUser = testCase.user.email?.toLowerCase()?.trim() === 'filo@gmail.com';
  const shouldBeBlocked = isFiloUser;
  const shouldShowAdmin = !shouldBeBlocked && testCase.user.isAdmin === true;
  
  const testPassed = result.isBlocked === shouldBeBlocked && 
                     result.hasAdminTab === shouldShowAdmin &&
                     !result.hasAdminTab; // Para filo, NUNCA deve ter admin tab
  
  console.log(`\nüìä Resultado esperado:`);
  console.log(`   - Deve ser bloqueado: ${shouldBeBlocked ? 'SIM' : 'N√ÉO'}`);
  console.log(`   - Deve mostrar admin: ${shouldShowAdmin ? 'SIM' : 'N√ÉO'}`);
  
  console.log(`üìä Resultado obtido:`);
  console.log(`   - Foi bloqueado: ${result.isBlocked ? 'SIM' : 'N√ÉO'}`);
  console.log(`   - Mostra admin: ${result.hasAdminTab ? 'SIM' : 'N√ÉO'}`);
  console.log(`   - Total de tabs: ${result.finalTabs.length}`);
  
  if (isFiloUser) {
    console.log(`üéØ VERIFICA√á√ÉO ESPEC√çFICA PARA FILO:`);
    console.log(`   - Tabs: ${result.finalTabs.join(', ')}`);
    console.log(`   - Cont√©m admin-doctors: ${result.hasAdminTab ? 'SIM ‚ùå ERRO!' : 'N√ÉO ‚úÖ CORRETO!'}`);
  }
  
  console.log(`${testPassed ? '‚úÖ' : '‚ùå'} Teste ${testPassed ? 'PASSOU' : 'FALHOU'}`);
  
  if (!testPassed) {
    allTestsPassed = false;
  }
});

console.log(`\n${'='.repeat(70)}`);
console.log('üèÅ RESUMO FINAL DOS TESTES');
console.log(`${'='.repeat(70)}`);

console.log(`\nüéØ Resultado geral: ${allTestsPassed ? '‚úÖ TODOS OS TESTES PASSARAM' : '‚ùå ALGUNS TESTES FALHARAM'}`);

console.log('\nüõ°Ô∏è PROTE√á√ïES IMPLEMENTADAS:');
console.log('1. ‚úÖ Blacklist absoluta para filo@gmail.com');
console.log('2. ‚úÖ Verifica√ß√£o de emerg√™ncia espec√≠fica para filo');
console.log('3. ‚úÖ Filtro de emerg√™ncia que remove admin tabs incorretas');
console.log('4. ‚úÖ Verifica√ß√£o ultra rigorosa em m√∫ltiplas camadas');
console.log('5. ‚úÖ Normaliza√ß√£o de email (lowercase + trim)');

console.log('\n‚ö° PARA APLICAR AS CORRE√á√ïES:');
console.log('1. Execute: node forceCleanRestart.js');
console.log('2. Feche completamente o aplicativo');
console.log('3. Limpe o cache: expo start -c');
console.log('4. Reabra o aplicativo');
console.log('5. Fa√ßa login com filo@gmail.com');
console.log('6. Verifique: deve ter APENAS 5 bot√µes na barra inferior');

module.exports = { testUltraRigorousAdminRemoval }; 