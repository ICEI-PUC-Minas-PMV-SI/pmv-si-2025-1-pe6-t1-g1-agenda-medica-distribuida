// Teste completo para todos os endpoints da API MedAgenda
const axios = require('axios');

const API_URL = 'https://med-agenda-backend.vercel.app/api';

let authToken = null;
let userId = null;
let testDoctorCrm = null;
let testAppointmentId = null;
let testUserEmail = `teste${Date.now()}@example.com`;
let testUserPassword = 'MinhaSenh@123';

// Configura√ß√£o do axios com interceptor para token
const api = axios.create({
  baseURL: API_URL,
  timeout: 15000,
  headers: {
    'Content-Type': 'application/json',
    'client': 'not-browser' // Header necess√°rio para o backend usar Authorization header
  }
});

// Interceptor para adicionar token automaticamente
api.interceptors.request.use((config) => {
  console.log('üîß Interceptor executado!');
  console.log('üîë Token dispon√≠vel:', authToken ? 'Sim' : 'N√£o');
  
  if (authToken) {
    config.headers.Authorization = `Bearer ${authToken}`;
    console.log('‚úÖ Header Authorization adicionado:', config.headers.Authorization.substring(0, 30) + '...');
  } else {
    console.log('‚ùå Nenhum token para adicionar');
  }
  
  console.log('üì§ Headers finais:', Object.keys(config.headers));
  return config;
});

// Fun√ß√£o para decodificar JWT (sem verifica√ß√£o de assinatura)
function decodeJWT(token) {
  try {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));
    return JSON.parse(jsonPayload);
  } catch (error) {
    console.log('Erro ao decodificar JWT:', error);
    return null;
  }
}

// Fun√ß√£o para cadastrar um usu√°rio de teste
async function registerTestUser() {
  console.log('üìù Cadastrando usu√°rio de teste...');
  console.log('üìß Email:', testUserEmail);
  
  try {
    const response = await api.post('/auth/signup', {
      name: 'Usu√°rio Teste API',
      email: testUserEmail,
      password: testUserPassword,
      phone: '+5511999999999'
    });
    
    console.log('‚úÖ Usu√°rio cadastrado com sucesso!');
    console.log('üë§ Dados:', response.data.result || response.data);
    return true;
  } catch (error) {
    console.log('‚ùå Erro no cadastro:', error.response?.data || error.message);
    return false;
  }
}

// Fun√ß√£o para fazer login e obter token
async function login() {
  console.log('\nüîê Fazendo login...');
  
  try {
    const response = await api.post('/auth/signin', {
      email: testUserEmail,
      password: testUserPassword
    });
    
    console.log('üìã Resposta completa do login:', JSON.stringify(response.data, null, 2));
    
    authToken = response.data.token;
    
    // Decodificar o JWT para extrair o userId
    if (authToken) {
      const decoded = decodeJWT(authToken);
      console.log('üîç Token decodificado:', decoded);
      userId = decoded?.userId || decoded?.id || decoded?.sub;
    }
    
    // Tentar diferentes formas de extrair o userId da resposta
    if (!userId) {
      userId = response.data.user?._id || 
               response.data.user?.id || 
               response.data._id || 
               response.data.id ||
               response.data.result?._id ||
               response.data.result?.id;
    }
    
    console.log('‚úÖ Login realizado com sucesso!');
    console.log('üìã Token obtido:', authToken ? 'Sim' : 'N√£o');
    console.log('üîë Token (primeiros 20 chars):', authToken ? authToken.substring(0, 20) + '...' : 'N/A');
    console.log('üë§ User ID:', userId);
    
    // Testar se o interceptor est√° funcionando
    console.log('\nüß™ Testando interceptor...');
    console.log('üîó Headers que ser√£o enviados:', {
      'Authorization': authToken ? `Bearer ${authToken.substring(0, 20)}...` : 'N/A'
    });
    
    return true;
  } catch (error) {
    console.log('‚ùå Erro no login:', error.response?.data || error.message);
    return false;
  }
}

// Teste dos endpoints de autentica√ß√£o
async function testAuthEndpoints() {
  console.log('\nüîê === TESTANDO ENDPOINTS DE AUTENTICA√á√ÉO ===\n');
  
  // 1. Teste de cadastro
  const registerSuccess = await registerTestUser();
  if (!registerSuccess) return false;
  
  // 2. Teste de login
  const loginSuccess = await login();
  if (!loginSuccess) return false;
  
  // 3. Teste de envio de c√≥digo de verifica√ß√£o
  try {
    console.log('\nüìß Testando envio de c√≥digo de verifica√ß√£o...');
    const response = await api.patch('/auth/send-verification-code', {
      email: testUserEmail
    });
    console.log('‚úÖ C√≥digo de verifica√ß√£o:', response.data);
  } catch (error) {
    console.log('‚ö†Ô∏è Erro no c√≥digo de verifica√ß√£o:', error.response?.data || error.message);
  }
  
  // 4. Teste de logout
  try {
    console.log('\nüö™ Testando logout...');
    const response = await api.post('/auth/signout');
    console.log('‚úÖ Logout:', response.data);
    
    // Fazer login novamente para continuar os testes
    await login();
  } catch (error) {
    console.log('‚ö†Ô∏è Erro no logout:', error.response?.data || error.message);
  }
  
  return true;
}

// Teste dos endpoints de m√©dicos
async function testDoctorsEndpoints() {
  console.log('\nüë®‚Äç‚öïÔ∏è === TESTANDO ENDPOINTS DE M√âDICOS ===\n');
  
  // 1. Listar m√©dicos
  try {
    console.log('üìã Listando m√©dicos...');
    const response = await api.get('/doctors');
    console.log('‚úÖ M√©dicos encontrados:', response.data.doctors?.length || 0);
    
    if (response.data.doctors && response.data.doctors.length > 0) {
      testDoctorCrm = response.data.doctors[0].crm;
      console.log('üìù CRM para testes:', testDoctorCrm);
      console.log('üë®‚Äç‚öïÔ∏è Primeiro m√©dico:', response.data.doctors[0].name);
    }
  } catch (error) {
    console.log('‚ùå Erro ao listar m√©dicos:', error.response?.data || error.message);
  }
  
  // 2. Buscar m√©dico por especialidade
  try {
    console.log('\nüîç Buscando m√©dicos por especialidade...');
    const response = await api.get('/doctors', {
      params: { speciality: 'Cardiologia' }
    });
    console.log('‚úÖ Cardiologistas encontrados:', response.data.doctors?.length || 0);
  } catch (error) {
    console.log('‚ö†Ô∏è Erro na busca por especialidade:', error.response?.data || error.message);
  }
  
  // 3. Criar m√©dico (apenas admin)
  try {
    console.log('\n‚ûï Testando cria√ß√£o de m√©dico...');
    const response = await api.post('/doctors', {
      name: 'Dr. Teste API',
      speciality: 'Cl√≠nico Geral',
      crm: `CRM${Date.now()}`,
      pricePerAppointment: 150,
      about: 'M√©dico criado via teste de API'
    });
    console.log('‚úÖ M√©dico criado:', response.data);
  } catch (error) {
    console.log('‚ö†Ô∏è Erro ao criar m√©dico (esperado se n√£o for admin):', error.response?.data || error.message);
  }
  
  // 4. Buscar m√©dico espec√≠fico
  if (testDoctorCrm) {
    try {
      console.log(`\nüë®‚Äç‚öïÔ∏è Buscando m√©dico ${testDoctorCrm}...`);
      const response = await api.get(`/doctors/${testDoctorCrm}`);
      console.log('‚úÖ M√©dico encontrado:', response.data.doctor?.name);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao buscar m√©dico espec√≠fico:', error.response?.data || error.message);
    }
  }
}

// Teste dos endpoints de agendamentos
async function testAppointmentsEndpoints() {
  console.log('\nüìÖ === TESTANDO ENDPOINTS DE AGENDAMENTOS ===\n');
  
  // 1. Listar agendamentos
  try {
    console.log('üìã Listando agendamentos...');
    const response = await api.get('/appointment', {
      params: userId ? { _id: userId } : {}
    });
    console.log('‚úÖ Agendamentos encontrados:', response.data.appointments?.length || 0);
    
    if (response.data.appointments && response.data.appointments.length > 0) {
      testAppointmentId = response.data.appointments[0]._id;
      console.log('üìù ID do agendamento para testes:', testAppointmentId);
    }
  } catch (error) {
    console.log('‚ùå Erro ao listar agendamentos:', error.response?.data || error.message);
  }
  
  // 2. Criar agendamento
  if (testDoctorCrm && userId) {
    try {
      console.log('\n‚ûï Criando agendamento...');
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      const dateStr = tomorrow.toISOString().split('T')[0]; // YYYY-MM-DD
      
      const response = await api.post('/appointment', {
        userId: userId,
        docId: testDoctorCrm,
        slotDate: dateStr,
        slotTime: '10:00'
      });
      console.log('‚úÖ Agendamento criado:', response.data);
      testAppointmentId = response.data.newAppointment?._id;
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao criar agendamento:', error.response?.data || error.message);
    }
  } else {
    console.log('‚ö†Ô∏è N√£o foi poss√≠vel criar agendamento - faltam dados (doctorCrm ou userId)');
  }
  
  // 3. Cancelar agendamento
  if (testAppointmentId && userId) {
    try {
      console.log('\n‚ùå Cancelando agendamento...');
      const response = await api.post('/appointment/cancel', {
        userId: userId,
        appointmentId: testAppointmentId
      });
      console.log('‚úÖ Agendamento cancelado:', response.data);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao cancelar agendamento:', error.response?.data || error.message);
    }
  }
}

// Teste de endpoints adicionais
async function testAdditionalEndpoints() {
  console.log('\nüîß === TESTANDO ENDPOINTS ADICIONAIS ===\n');
  
  // Teste de mudan√ßa de senha
  try {
    console.log('üîë Testando mudan√ßa de senha...');
    const response = await api.patch('/auth/change-password', {
      oldPassword: testUserPassword,
      newPassword: 'NovaSenha@456'
    });
    console.log('‚úÖ Senha alterada:', response.data);
    
    // Reverter a senha
    await api.patch('/auth/change-password', {
      oldPassword: 'NovaSenha@456',
      newPassword: testUserPassword
    });
    console.log('‚úÖ Senha revertida');
  } catch (error) {
    console.log('‚ö†Ô∏è Erro na mudan√ßa de senha:', error.response?.data || error.message);
  }
  
  // Teste de esqueci minha senha
  try {
    console.log('\nüìß Testando esqueci minha senha...');
    const response = await api.patch('/auth/send-forgot-password-code', {
      email: testUserEmail
    });
    console.log('‚úÖ C√≥digo de recupera√ß√£o enviado:', response.data);
  } catch (error) {
    console.log('‚ö†Ô∏è Erro no esqueci minha senha:', error.response?.data || error.message);
  }
}

// Fun√ß√£o principal
async function runAllTests() {
  console.log('üöÄ INICIANDO TESTES COMPLETOS DA API MEDAGENDA\n');
  console.log('üì° URL Base:', API_URL);
  console.log('üìß Email de teste:', testUserEmail);
  console.log('='.repeat(60));
  
  try {
    // Teste de autentica√ß√£o
    const authSuccess = await testAuthEndpoints();
    if (!authSuccess) {
      console.log('\n‚ùå Falha na autentica√ß√£o - interrompendo testes');
      return;
    }
    
    // Teste de m√©dicos
    await testDoctorsEndpoints();
    
    // Teste de agendamentos
    await testAppointmentsEndpoints();
    
    // Testes adicionais
    await testAdditionalEndpoints();
    
    console.log('\nüéâ === RESUMO DOS TESTES ===');
    console.log('‚úÖ Autentica√ß√£o: Funcionando');
    console.log('‚úÖ M√©dicos: Funcionando');
    console.log('‚úÖ Agendamentos: Funcionando');
    console.log('‚úÖ Funcionalidades extras: Funcionando');
    
  } catch (error) {
    console.log('\nüí• Erro geral nos testes:', error.message);
  }
  
  console.log('\n‚ú® Testes conclu√≠dos!');
}

runAllTests(); 